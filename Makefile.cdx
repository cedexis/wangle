DIR=/vagrant/wangle
LABEL=cdx-wangle

default : package

package : GIT_HASH := $(shell git rev-parse HEAD)
package : build
	mkdir -p build.cdx/install
	DESTDIR=`pwd`/build.cdx/install make -C wangle install
	cd build.cdx; fpm -f -C install -n cdx-wangle \
		--deb-no-default-config-files \
		--version 1.4.1 \
		--description "Git Commit: $(GIT_HASH)" \
		-s dir -t deb usr

.PHONY: clean
clean :
	rm -rf build.cdx
	make -C wangle clean
	rm wangle/Makefile
	@echo "Consider git -xn clean followed by git -xf clean"

build : wangle/Makefile
	cd wangle; make -j4

wangle/Makefile: wangle/VERSION
	cd wangle; cmake .

# ================
# Vagrant machinery

vagrant-up : clean
	vagrant up
	vagrant ssh -c "cd $(DIR) && make docker-up"

vagrant-bash:
	vagrant ssh -c "cd $(DIR) && make docker-bash"

vagrant-destroy:
	vagrant destroy

vagrant-build:
	vagrant ssh -c "cd $(DIR) && sudo docker run -v /vagrant:/repo -w /repo $(LABEL) make"

vagrant-package:
	vagrant ssh -c "cd ($DIR) && sudo docker run -v /vagrant:/repo -w /repo $(LABEL) make package"

# ================
# Build directly in docker if we're running on a compatible host

docker-up:
	sudo docker build --no-cache --rm -t $(LABEL) .

docker-build:
	sudo docker run -v `pwd`/..:/repo -w /repo $(LABEL) make BAMBOO_BUILD_NUMBER=$(BAMBOO_BUILD_NUMBER)

docker-package:
	sudo docker run -v `pwd`/..:/repo -w /repo $(LABEL) make package BAMBOO_BUILD_NUMBER=$(BAMBOO_BUILD_NUMBER)

docker-bash:
	sudo docker run -i -t -v `pwd`/..:/repo -w /repo $(LABEL) /bin/bash

# ================
#

